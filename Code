import datetime, time
import csv
import random
import os
from os import path
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from jinja2 import Environment, FileSystemLoader
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
from sys import platform


def login(driver, usr, passw):

    print("Logging in...")

    driver.get("https://www.linkedin.com")
    time.sleep(2)

    # Check if it is needed to log in
    if driver.find_elements_by_class_name("nav__button-secondary"):

        # Cookies:
        if driver.find_elements_by_class_name("global-alert__message-content"):
            driver.find_element_by_class_name("global-alert__button").click()
            time.sleep(2)

        driver.find_element_by_class_name("nav__button-secondary").click()

        # Wait till page loads
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "username")))
        time.sleep(2)

        # Login action
        driver.find_element_by_id("username").send_keys(usr)
        time.sleep(2)
        driver.find_element_by_id("password").send_keys(passw)
        time.sleep(2)

        if driver.find_elements_by_id("rememberMeOptIn-checkbox"):
            driver.find_element_by_class_name("remember_me__opt_in").find_element_by_tag_name("label").click()
            time.sleep(2)
        driver.find_element_by_class_name("login__form_action_container ").find_element_by_tag_name("button").click()
        time.sleep(2)

        print("Logged in")
        print("")
    else:
        print("Already logged in")
        print("")


def company_connect(driver, companies, n):
    for x in companies:
        driver.get(x)

        close_message_box(driver)

        # See company workers
        driver.find_element_by_css_selector("[data-control-name='topcard_see_all_employees']").click()

        time.sleep(5)


def contact_your_area(driver, n):
    driver.get("https://www.linkedin.com/mynetwork/")
    close_message_box(driver)

    # See all Madrid Suggestions
    driver.find_element_by_css_selector("[data-control-name='see_all_recommendations_shortcut']").click()
    time.sleep(2)


def contact_suggestions(driver, n):
    print("Connecting with ", n, " suggested people...")

    driver.get("https://www.linkedin.com/mynetwork/")

    # Cookies:
    if driver.find_elements_by_class_name("artdeco-global-alert__dismiss"):
        driver.find_element_by_class_name("artdeco-global-alert__dismiss").click()
    time.sleep(3)

    # Close all elements that might interfere
    close_message_box(driver)
    time.sleep(3)
    hide_message_box(driver)
    time.sleep(3)
    hide_nav_tab(driver)

    # Scroll to bottom
    driver.find_element_by_tag_name('body').send_keys(Keys.END)
    time.sleep(3)

    # Get the bottom list number (suggested people)
    w = len(driver.find_elements_by_class_name("discover-entity-list")) - 1

    # Get the necessary number of cards to show up to follow the desired amount of people
    elms = []
    while len(elms) <= n:
        # Load more suggestions
        driver.find_element_by_tag_name('body').send_keys(Keys.HOME)
        time.sleep(5)
        driver.find_element_by_tag_name('body').send_keys(Keys.END)
        time.sleep(5)
        elms = driver.find_elements_by_class_name("discover-entity-list")[w].find_elements_by_tag_name("li")
        time.sleep(3)

    print("There are ", len(elms), " people to chose from")
    print("")

    # Start connecting with people
    invited = 0
    while invited < n:
        m = random.randint(0, n)

        # Check that the person isn't already invited
        if elms[m].find_elements_by_class_name("artdeco-button__text")[1].text == "Connect":
            print("Connecting with: ", elms[m].find_element_by_class_name("discover-person-card__name").text)
            print("Relationship: ", elms[m].find_element_by_class_name("member-insights__reason").text)
            elms[m].find_element_by_css_selector("[data-control-name='invite']").click()
            print("Connected")
            print(" ")
            invited = invited + 1
            time.sleep(5)


def close_message_box(driver):
    if driver.find_elements_by_css_selector("[data-control-name='overlay.minimize_connection_list_bar']"):
        driver.find_element_by_class_name("msg-overlay-list-bubble").find_element_by_tag_name("header").click()
        time.sleep(2)


def hide_message_box(driver):
    # Javascript to hide an element
    js_script = '''\
    element1 = document.getElementsByClassName('msg-overlay-list-bubble');
    element1[0].style.display = 'none';
    '''
    driver.execute_script(js_script)


def hide_nav_tab(driver):
    # Javascript to hide an element
    js_script = '''\
    element1 = document.getElementById('extended-nav');
    element1.style.display = 'none';
    '''
    driver.execute_script(js_script)


while True:

    # Credentials:
    username = "usr"
    password = "pass"

    # Companies links:
    companies_list = ["link1",
                      "link2"]

    # Time (in 24h hours) to start the bot
    start = 9

    # Number of daily people to follow from each category
    n_your_area = 0
    n_suggestions = 20
    n_companies = 0

    # Number of hours to run each day:
    hours = 4

    # GeckoDriver options
    opts = Options()
    opts.headless = True
    binary = r'C:\Program Files\Mozilla Firefox\firefox.exe'
    opts.binary = binary
    cap = DesiredCapabilities().FIREFOX
    cap["marionette"] = True

    # Path to GeckoDriver
    expath = r"C:\Users\meh\Desktop\Linkedin\geckodriver.exe"

    # Calculate hourly followings:
    n_your_area = int(round(n_your_area / hours))
    n_suggestions = int(round(n_suggestions / hours))
    n_companies = int(round(n_companies / hours))

    while True:
        
        print("Initializing...")

        # Setup driver
        driver2 = webdriver.Firefox(capabilities=cap, executable_path=expath, options=opts)
    
        # Start
        login(driver2, username, password)

        h = 0
        while h <= hours:
            # contact_your_area(driver2, n_your_area)
            contact_suggestions(driver2, n_suggestions)
            # company_connect(driver2, companies_list, n_companies)
            h = h + 1

            # Sleep hourly
            minutesToSleep = 60 - datetime.datetime.now().minute + random.randint(0, 30)
            print()
            print("Waiting ", minutesToSleep, " minutes")
            time.sleep(minutesToSleep * 60)

        start_time = random.randint(start, start + 3)

        hoursToSleep = (23 - datetime.datetime.now().hour) + start_time
        minutesToSleep = 60 - datetime.datetime.now().minute
        randomminutes = random.randint(1, 59)
        minutesToSleep = minutesToSleep + randomminutes
        
        driver2.close()
        time.sleep(1)
        driver2.quit()
        
        print()
        print("Waiting ", hoursToSleep, " hours and ", minutesToSleep, " minutes")
        print("Until ", start_time, ":", randomminutes)
        time.sleep(hoursToSleep * 60 * 60 + minutesToSleep * 60)
